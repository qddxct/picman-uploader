<s:ItemRenderer
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    creationComplete="init()"
	dataChange="updateData()"
    >

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
		<s:State name="ok" />
		<s:State name="failed" />
		<s:State name="uploading" />
    </s:states>

    <fx:Script><![CDATA[

		import cn.alibaba.product.uploader.core.File;
		import flash.events.MouseEvent;

		[Bindable]
		private var upProgPercent:String = '';

		[Bindable]
		private var tip:String;
		private var thumbManager:ThumbManager = ThumbManager.instance;

        private function init():void
        {
			addEventListener('mouseDown', stopEvt, true);
        }

		private function updateData():void
		{
			tip = null;

            var file:File = data as File;
			file.addEventListener('statusChange', onFileStatusChange);
			updateFileStatus( file );

			clearCurrentThumb();

			var id:String = file.id;
			thumbManager.addEventListener(ThumbEvent.LOADED, onThumbLoaded);
			thumbManager.loadThumb( file.id );
		}

		override protected function set hovered(value:Boolean):void
		{
			if(usingDefaultHovered()){
				super.hovered = value;
			}
		}

		private function usingDefaultHovered():Boolean 
		{
			var states:Array = 'uploading failed'.split(' ');
			return states.indexOf( currentState ) === -1;
		}

		private function clearCurrentThumb():void
		{
			thumb.source = null;
		}

		private function stopEvt(evt:Event):void
		{
			evt.preventDefault();
			evt.stopPropagation();
			evt.stopImmediatePropagation();
		}

		private function onFileStatusChange(evt:Event):void
		{
            var file:File = data as File;
			updateFileStatus( file );
		}

		private function updateFileStatus( file:File ):void
		{
			var handler:String = 'updateFileStatus_' + file.status.type;
			if( file.finished && file.failed ){
				currentState = 'failed';
				tip = file.status.data;
			}
			try { this[handler](file); }
			catch (e:Error) {}
		}

		private function updateFileStatus_ready(file:File):void
		{
			currentState = 'normal';
		}

		private function updateFileStatus_cs_processing(file:File):void
		{
			currentState = 'uploading';
			var prog:Number = Number(file.status.data);
			updateProgress( prog );
		}

		private function updateFileStatus_cs_processed(file:File):void
		{
			updateProgress(1.0);
		}

		private function updateProgress(prog:Number):void
		{
			upProgPercent = Math.floor(prog * 100) + '%';
			progBar.width = Math.floor(prog * 82);
		}

		private function updateFileStatus_success(file:File):void
		{
			currentState = 'ok';
		}

		private function onClickRmBtn(evt:Event):void
		{
			stopEvt(evt);
			dispatchEvent( new Event('remove', true, true) );
		}

		private function onClickRotBtn(evt:Event):void
		{
			stopEvt(evt);

			thumb.rotation += 90;
			var file:File = data as File;
			file.customProperties['rotation'] = thumb.rotation;
		}

		private function onThumbLoaded(evt:ThumbEvent):void
		{
			var file:File = data as File;
			if(evt.data === file.id){
				thumb.source = thumbManager.getThumb( file.id );
				thumb.rotation = Number(file.customProperties['rotation']) || 0;
				thumbManager.removeEventListener( evt.type, arguments.callee );
			}
		}


    ]]></fx:Script>
    
	<s:VGroup>

		<s:Group id="thumbContainer" width="82" height="82" >
			<s:Rect width="100%" height="100%" >
				<s:stroke>
					<s:SolidColorStroke color="0xcccccc" color.failed="0xFF0000" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="0xf8fbff" color.failed="#FFF5F5" />
				</s:fill>
			</s:Rect>

			<s:Image id="thumb" 
				horizontalCenter="0"
				verticalCenter="0"
				maxWidth="80" maxHeight="80" />

		</s:Group>
		
		<s:Label text="{data.name}" 
			width="80" 
			lineBreak="toFit" 
			showTruncationTip="true" 
			maxDisplayedLines="1" 

			color="0x838485" 
			textAlign="center" 
		  />
	</s:VGroup>

	<s:Group
		includeIn="uploading"
		width="100%" height="20" bottom="18">

		<s:Rect width="100%" height="20" >
			<s:fill><s:SolidColor color="0xCCCCCC" alpha="0.5" /></s:fill>
		</s:Rect>

		<s:Rect id="progBar" width="0" height="20" >
			<s:fill><s:SolidColor color="0x0000FF" alpha="0.5" /></s:fill>
		</s:Rect>

		<s:Label text="{upProgPercent}" textAlign="center" width="80" height="20" verticalAlign="middle" color="0xFFFFFF" />
	</s:Group>

	<s:HGroup
		includeIn="hovered"
		width="100%" height="20" bottom="20">
		<s:Button label="旋转" width="30" click="onClickRotBtn(event)" />
		<s:Button label="删除" width="30" click="onClickRmBtn(event)" />
	</s:HGroup>
    
	<s:Group
		includeIn="failed"
		width="100%" height="20" bottom="18">

		<s:Rect width="100%" height="20" >
			<s:fill><s:SolidColor color="0xFF0000" alpha="0.5" /></s:fill>
		</s:Rect>

		<s:Label id="failMsg" text="上传失败" textAlign="center" width="80" height="20" verticalAlign="middle" color="0xFFFFFF" toolTip="{tip}" />
	</s:Group>

	<s:Group
		includeIn="ok"
		width="100%" height="20" bottom="18">

		<s:Rect width="100%" height="20" >
			<s:fill><s:SolidColor color="0x7FBE45" alpha="1" /></s:fill>
		</s:Rect>

		<s:Label text="done" textAlign="center" width="80" height="20" verticalAlign="middle" color="0xFFFFFF" />
	</s:Group>

</s:ItemRenderer>
