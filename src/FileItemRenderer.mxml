<s:ItemRenderer
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:mx="library://ns.adobe.com/flex/mx"
    creationComplete="init()"
	dataChange="updateData()"
    >

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
		<s:State name="ok" />
		<s:State name="failed" />
		<s:State name="uploading" />
    </s:states>

    <fx:Script><![CDATA[

		import cn.alibaba.product.uploader.core.File;
		import flash.events.MouseEvent;

		[Bindable]
		private var upProgPercent:String = '';

		[Bindable]
		private var tip:String;

		[Bindable]
		private var canRotate:Boolean = false;

		private var thumbManager:ThumbManager = ThumbManager.instance;

        private function init():void
        {
			addEventListener('mouseDown', stopEvt, true);
        }

		private function updateData():void
		{
			tip = null;

            var file:File = data as File;
			file.addEventListener('statusChange', onFileStatusChange);

			updateFileStatus( file );
			clearCurrentThumb();

			var id:String = file.id;
			thumbManager.addEventListener(ThumbEvent.LOADED, onThumbLoaded);
			thumbManager.addEventListener(ThumbEvent.LOAD_FAIL, onThumbLoadFail);
			thumbManager.loadThumb( file.id );

		}

		override protected function set hovered(value:Boolean):void
		{
			if(usingDefaultHovered()){
				super.hovered = value;
			}
		}

		private function usingDefaultHovered():Boolean 
		{
			var states:Array = 'uploading failed'.split(' ');
			return states.indexOf( currentState ) === -1;
		}

		private function clearCurrentThumb():void
		{
			thumb.source = null;
		}

		private function stopEvt(evt:Event):void
		{
			evt.preventDefault();
			evt.stopPropagation();
			evt.stopImmediatePropagation();
		}

		private function onFileStatusChange(evt:Event):void
		{
            var file:File = data as File;
			updateFileStatus( file );
		}

		private function updateFileStatus( file:File ):void
		{
			var handler:String = 'updateFileStatus_' + file.status.type;
			if( file.finished && file.failed ){
				currentState = 'failed';
				tip = file.status.data;
			}
			try { this[handler](file); }
			catch (e:Error) {}
		}

		private function updateFileStatus_ready(file:File):void
		{
			currentState = 'normal';
		}

		private function updateFileStatus_cs_processing(file:File):void
		{
			currentState = 'uploading';
			var prog:Number = Number(file.status.data);
			updateProgress( prog );
		}

		private function updateFileStatus_cs_processed(file:File):void
		{
			updateProgress(1.0);
		}

		private function updateProgress(prog:Number):void
		{
			upProgPercent = Math.floor(prog * 100) + '%';
			progBar.width = Math.floor(prog * 80);
		}

		private function onClickRmBtn(evt:Event):void
		{
			stopEvt(evt);
			dispatchEvent( new Event('remove', true, true) );
		}

		private function onClickRotBtn(evt:Event):void
		{
			stopEvt(evt);

			if(canRotate){
				thumb.rotation += 90;
				var file:File = data as File;
				file.customProperties['rotation'] = thumb.rotation;
			}
		}

		private function onThumbLoaded(evt:ThumbEvent):void
		{
			var file:File = data as File;
			if(evt.data === file.id){
				thumb.source = thumbManager.getThumb( file.id );
				thumb.rotation = Number(file.customProperties['rotation']) || 0;
				thumbManager.removeEventListener( evt.type, arguments.callee );
				canRotate = Boolean( file.customProperties['canRotate'] );
			}
		}

		private function onThumbLoadFail(evt:ThumbEvent):void
		{
			var file:File = data as File;
			if(evt.data === file.id){
				canRotate = false;
			}
		}


    ]]></fx:Script>

	
	<s:VGroup gap="0">

		<s:Group id="thumbContainer" width="82" height="82" >
			<s:Rect width="100%" height="100%" >
				<s:stroke>
					<s:SolidColorStroke color="0xcccccc" color.failed="0xFF0000" />
				</s:stroke>
				<s:fill>
					<s:SolidColor color="0xffffff" color.failed="#FFF5F5" />
				</s:fill>
			</s:Rect>

			<s:Image id="thumb" 
				horizontalCenter="0"
				verticalCenter="0"
				maxWidth="80" maxHeight="80" />

			<s:Group id="actions" width="100%" height="20" bottom="0" left="1" right="1">

			<s:Group includeIn="hovered"
				height="100%"
				toolTip="{canRotate ? '' : '图片太大,无法旋转'}"
				>


					<s:Rect width="80" height="100%">
						<s:fill><s:SolidColor color="#8d8e90" alpha="0.2" /></s:fill>
					</s:Rect>

					<s:Button label="旋转" 
						left="4" 
						verticalCenter="0"
						click="onClickRotBtn(event)" 
						skinClass="{RotateButton}" 
						enabled="{canRotate}"
						toolTip="旋转图片"
						/>

					<s:Button label="删除" right="4" 
						verticalCenter="0"
						click="onClickRmBtn(event)" 
						toolTip="移除图片"
						skinClass="{RemoveFileButton}" />
				</s:Group>

				<s:Group includeIn="uploading">
					<s:Rect width="100%" height="100%" >
						<s:fill><s:SolidColor color="0xCCCCCC" alpha="0.5" /></s:fill>
					</s:Rect>

					<s:Rect id="progBar" width="0" height="20" >
						<s:fill><s:SolidColor color="#407ACA" alpha="0.8" /></s:fill>
					</s:Rect>

					<s:Label text="{upProgPercent}" textAlign="center" width="80" height="20" verticalAlign="middle" color="0xFFFFFF" />
				</s:Group>

				<s:Group includeIn="failed" toolTip="{tip}">
					<s:Rect width="100%" height="100%">
						<s:fill><s:SolidColor color="0xda7070" alpha="0.21" /></s:fill>
					</s:Rect>

					<s:HGroup verticalAlign="middle" horizontalAlign="center" width="80">
						<s:Label id="failMsg" text="上传失败" 
							height="20" 
							verticalAlign="middle" 
							color="#DA7070" 
							/>

						<s:Image source="@Embed(source='../assets/fail-tip-icon.gif')" />
					</s:HGroup>
				</s:Group>

			</s:Group>

		</s:Group>
		
		<s:Label text="{data.name}" 
			width="80" 
			height="32"
			lineBreak="toFit" 
			showTruncationTip="true" 
			maxDisplayedLines="1" 

			color="0x838485" 
			textAlign="center"
			verticalAlign="middle"
		  />
	</s:VGroup>
</s:ItemRenderer>
